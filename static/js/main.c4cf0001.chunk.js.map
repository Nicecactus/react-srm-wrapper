{"version":3,"sources":["MyModuleLoader.tsx","index.tsx","../../resource-fetcher.service.ts","../../index.tsx","../../getObjectFromPath.ts"],"names":["MyModuleLoader","assetManifestUrl","process","exportPath","ReactDOM","render","document","getElementById","ResourceFetcherService","loadSRM","loadManifest","assetManifest","entrypoints","origin","URL","href","Promise","all","map","asset","match","loadScript","loadStyle","e","url","resourceCache","assetManifests","fetch","then","r","json","src","scripts","script","createElement","async","promise","onload","res","head","appendChild","styles","link","rel","basename","language","renderArguments","arguments","eventHandlers","loaded","rendered","anchorEl","createRef","history","useHistory","useState","initialized","setInitialized","executed","setExecuted","srmMethods","setSrmMethods","useEffect","current","execute","obj","path","o","window","split","key","element","navigate","commands","_options","push","urljoin","sendEvent","id","args","React","ref"],"mappings":"kOAYeA,EATQ,WACrB,OACE,oCACE,iDACA,kBAAC,kBAAD,CAAiBC,iBAAkBC,4CAA2CC,WAAW,mBCD/FC,IAASC,OAAO,kBAAC,EAAD,MAAoBC,SAASC,eAAe,U,0bCQ/CC,oCAOSC,iBAAQR,8BACEO,EAAuBE,aAAaT,mBAA1DU,GACN,GAAKA,GAAkBA,EAAcC,YAArC,CAIA,IAAMC,EAAS,IAAIC,IAAOb,SAAuBc,4BAC3CC,QAAQC,IAAIN,EAAcC,YAAYM,KAAI,YAG9C,QAFcC,EAAMC,MAAM,WAAa,QAGrC,IAAK,MACH,OAAOZ,EAAuBa,cAAcR,EAASM,GACvD,IAAK,OACH,OAAOX,EAAuBc,aAAaT,EAASM,kCArB9D,MAAAI,GAAA,sBAAAA,OA2BuBb,sBAAac,OAKhC,OAJKhB,EAAuBiB,cAAcC,eAAeF,KACvDhB,EAAuBiB,cAAcC,eAAeF,GAAOG,MAAMH,GAAKI,MAAK,mBAAKC,EAAEC,2BAG7EtB,EAAuBiB,cAAcC,eAAeF,IAhC/D,MAAAD,GAAA,sBAAAA,OAmCuBF,oBAAWU,OAC9B,IAAKvB,EAAuBiB,cAAcO,QAAQD,GAAM,CACtD,IAAME,EAAS3B,SAAS4B,cAAc,UACtCD,EAAOE,SACPF,EAAOF,IAAMA,EACb,IAAMK,EAAU,IAAIpB,SAAc,mBAAOiB,EAAOI,OAAS,kBAAMC,QAC/DhC,SAASiC,KAAKC,YAAYP,GAE1BzB,EAAuBiB,cAAcO,QAAQD,GAAOK,EAGtD,uBAAO5B,EAAuBiB,cAAcO,QAAQD,IA9CxD,MAAAR,GAAA,sBAAAA,OAiDuBD,mBAAUS,OAC7B,IAAKvB,EAAuBiB,cAAcgB,OAAOV,GAAM,CACrD,IAAMW,EAAOpC,SAAS4B,cAAc,QACpCQ,EAAKC,IAAM,aACXD,EAAK3B,KAAOgB,EACZ,IAAMK,EAAU,IAAIpB,SAAc,mBAAO0B,EAAKL,OAAS,kBAAMC,QAC7DhC,SAASiC,KAAKC,YAAYE,GAE1BlC,EAAuBiB,cAAcgB,OAAOV,GAAOK,EAGrD,uBAAO5B,EAAuBiB,cAAcgB,OAAOV,IA5DvD,MAAAR,GAAA,sBAAAA,OAAaf,GACIA,gBAA+B,CAC5CkB,eAAgB,GAChBM,QAAS,GACTS,OAAQ,sCCKVxC,qBACAE,eACAyC,aACAC,aACWC,IAAXC,UACAC,kBACAC,WACAC,aAEMC,EAAWC,cACXC,EAAUC,iBACsBC,eAA/BC,OAAaC,SACYF,eAAzBG,OAAUC,SACmBJ,mBAA7BK,OAAYC,OAUnBC,aAAU,2CAPFtD,EAAuBC,QAAQR,qBAErCgD,WAASE,EAASY,SAElBN,SALc,mCAQN,KAEP,IAEHK,aAAU,WACRE,MACC,CAACb,EAAUK,IAEd,IAAMQ,EAAU,WACd,IAAIN,GAAaP,EAASY,SAAYP,EAAtC,CAIAG,MACA,IAAMM,WC5DwBC,GAG9B,IAFA,MAAIC,EAASC,6rBACCF,EAAKG,MAAM,qBACA,KAAdC,UACP,IAAKH,EACD,OAAO,KAGNG,IAILH,EAAIA,EAAEG,IAGV,OAAOH,ED6CDF,CAAwB9D,GACzB8D,GAAQA,EAAI5D,SAIjBwD,EAAcI,EAAI5D,UAChBkE,QAASpB,EAASY,QAClBnB,SAAUA,EACVC,SAAUA,EACV2B,SAAU,SAACC,EAAiBC,UAAkBrB,EAAQsB,KAAKC,EAAQH,KACnEI,UAAW,SAACC,gCAAeC,8DAAqB/B,qBAAgB8B,uBAAhB9B,0BAAyB+B,MACtEjC,KAGLI,WAAWU,MAGb,OACEoB,uBAAKC,IAAK9B,O","file":"static/js/main.c4cf0001.chunk.js","sourcesContent":["import React from 'react'\nimport { ReactSRMWrapper } from '@robingoupil/react-srm-wrapper';\n\nconst MyModuleLoader = () => {\n  return (\n    <>\n      <h2>React SRM wrapper</h2>\n      <ReactSRMWrapper assetManifestUrl={process.env.REACT_APP_ASSET_MANIFEST_URL!} exportPath=\"testing.test\" />\n    </>\n  )\n};\n\nexport default MyModuleLoader;\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport MyModuleLoader from './MyModuleLoader'\n\nReactDOM.render(<MyModuleLoader />, document.getElementById('root'))\n","export interface AssetManifest {\n  entrypoints: Array<string>;\n}\n\ninterface ResourceCache {\n  assetManifests: Cache<Promise<any>>;\n  scripts: Cache<Promise<void>>;\n  styles: Cache<Promise<void>>;\n}\n\ninterface Cache<T> {\n  [key: string]: T;\n}\n\nexport class ResourceFetcherService {\n  private static resourceCache: ResourceCache = {\n    assetManifests: {},\n    scripts: {},\n    styles: {},\n  };\n\n  public static async loadSRM(assetManifestUrl: string): Promise<void> {\n    const assetManifest = await ResourceFetcherService.loadManifest(assetManifestUrl);\n    if (!assetManifest || !assetManifest.entrypoints) {\n      return;\n    }\n\n    const origin = new URL(`${assetManifestUrl}/..`).href;\n    await Promise.all(assetManifest.entrypoints.map(asset => {\n      const [ext] = asset.match(/\\.\\w+$/) || [];\n\n      switch (ext) {\n        case '.js':\n          return ResourceFetcherService.loadScript(`${origin}${asset}`);\n        case '.css':\n          return ResourceFetcherService.loadStyle(`${origin}${asset}`);\n      }\n      return;\n    }));\n  }\n\n  private static async loadManifest(url: string): Promise<AssetManifest> {\n    if (!ResourceFetcherService.resourceCache.assetManifests[url]) {\n      ResourceFetcherService.resourceCache.assetManifests[url] = fetch(url).then(r => r.json());\n    }\n\n    return ResourceFetcherService.resourceCache.assetManifests[url];\n  }\n\n  private static async loadScript(src: string): Promise<void> {\n    if (!ResourceFetcherService.resourceCache.scripts[src]) {\n      const script = document.createElement('script') as HTMLScriptElement;\n      script.async = true;\n      script.src = src;\n      const promise = new Promise<void>(res => script.onload = () => res());\n      document.head.appendChild(script);\n\n      ResourceFetcherService.resourceCache.scripts[src] = promise;\n    }\n\n    return ResourceFetcherService.resourceCache.scripts[src];\n  }\n\n  private static async loadStyle(src: string): Promise<void> {\n    if (!ResourceFetcherService.resourceCache.styles[src]) {\n      const link = document.createElement('link') as HTMLLinkElement;\n      link.rel = 'stylesheet';\n      link.href = src;\n      const promise = new Promise<void>(res => link.onload = () => res());\n      document.head.appendChild(link);\n\n      ResourceFetcherService.resourceCache.styles[src] = promise;\n    }\n\n    return ResourceFetcherService.resourceCache.styles[src];\n  }\n}\n","import React, { createRef, useEffect, useState } from 'react';\nimport { ResourceFetcherService } from './resource-fetcher.service';\nimport { getObjectFromPath } from './getObjectFromPath';\nimport { useHistory } from 'react-router-dom';\nimport urljoin from 'url-join';\n\ninterface SRMMethods {\n  setBasename: (basename: string) => string;\n  setLanguage: (language: string) => string;\n}\n\nexport interface Props {\n  assetManifestUrl: string;\n  exportPath: string;\n  basename?: string;\n  language?: string;\n  arguments?: any;\n  eventHandlers?: { [id: string]: (...args: Array<any>) => Promise<any> };\n  loaded?: (el: HTMLElement) => any;\n  rendered?: (ret: any) => any;\n}\n\nexport function ReactSRMWrapper({\n  assetManifestUrl,\n  exportPath,\n  basename,\n  language,\n  arguments: renderArguments,\n  eventHandlers,\n  loaded,\n  rendered,\n}: Props) {\n  const anchorEl = createRef<HTMLDivElement>();\n  const history = useHistory();\n  const [initialized, setInitialized] = useState(false);\n  const [executed, setExecuted] = useState(false);\n  const [srmMethods, setSrmMethods] = useState<SRMMethods | undefined>(undefined);\n\n  const initialize = async () => {\n    await ResourceFetcherService.loadSRM(assetManifestUrl);\n\n    loaded?.(anchorEl.current!);\n\n    setInitialized(true);\n  };\n\n  useEffect(() => {\n    initialize();\n  }, []);\n\n  useEffect(() => {\n    execute();\n  }, [anchorEl, initialized])\n\n  const execute = () => {\n    if (executed || !anchorEl.current || !initialized) {\n      return;\n    }\n\n    setExecuted(true);\n    const obj = getObjectFromPath(exportPath);\n    if (!obj || !obj.render) {\n      return;\n    }\n\n    setSrmMethods(obj.render({\n      element: anchorEl.current,\n      basename: basename,\n      language: language,\n      navigate: (commands: any[], _options: any) => history.push(urljoin(commands)),\n      sendEvent: (id: string, ...args: Array<any>) => eventHandlers?.[id]?.(...args),\n      ...renderArguments,\n    }));\n\n    rendered?.(srmMethods);\n  }\n\n  return (\n    <div ref={anchorEl}></div>\n  );\n}\n","export function getObjectFromPath(path: string): any {\n    let o: any = window;\n    const split = path.split('.');\n    for (const key of split) {\n        if (!o) {\n            return null;\n        }\n\n        if (!key) {\n            continue;\n        }\n\n        o = o[key];\n    }\n\n    return o;\n}\n"],"sourceRoot":""}