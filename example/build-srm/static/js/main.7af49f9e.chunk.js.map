{"version":3,"sources":["../../index.tsx","../../store.ts","logo.png","_translations sync /^/.//.*/.json$","store.ts","App.tsx","index.tsx"],"names":["packg","path","SRMStore","createContextStore","initialData","sendEvent","navigate","basename","setBasename","action","state","value","language","setLanguage","messages","loadMessages","require","e","name","overrideModel","store","key","removeModel","addModel","__webpack_public_path__","process","endsWith","render","srm","props","element","selector","ret","Content","memo","useStore","getActions","getState","React","IntlProvider","locale","defaultLocale","Object","assign","el","document","querySelector","ReactDOM","className","StrictMode","Provider","out","split","reduce","obj","part","window","module","exports","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","Error","code","keys","resolve","ContextStore","getUsername","user","JSON","parse","localStorage","getItem","App","useStoreState","s","alt","src","logo","description","defaultMessage","role","aria-label","values","SRM","lang"],"mappings":"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","file":"static/js/main.7af49f9e.chunk.js","sourcesContent":["import React, { memo, ReactElement } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Store } from 'easy-peasy';\nimport { IntlProvider } from 'react-intl';\nimport _SRMStore, { ContextStoreModel, LoadMessagesFunction } from './store';\n\nexport const SRMStore = _SRMStore;\n\ndeclare var __webpack_public_path__: string;\n\nlet packg: { name: string };\ntry {\n  packg = require('webapp__package.json');\n} catch (e) {\n  packg = { name: 'srm_testing' };\n}\n\ninterface PropsMountSelector {\n  selector: string;\n  element?: null;\n}\n\ninterface PropsMountElement {\n  selector?: null;\n  element: HTMLElement;\n}\n\ntype PropsMount = PropsMountSelector | PropsMountElement;\n\ninterface PropsCommon {\n  sendEvent?: (id: string, ...args: Array<any>) => Promise<any>;\n  navigate: (\n    commands: string | Array<string>,\n    options?: { queryParams?: any }\n  ) => any;\n  loadMessages?: LoadMessagesFunction;\n  basename?: string;\n  publicPath?: string;\n  language?: string;\n}\n\nexport type PropsSRM<T = void> = PropsMount & PropsCommon & T;\nexport type PropsApp = { [key: string]: any };\n\nexport type RenderFunction<Props extends PropsApp> = (\n  props: Props\n) => ReactElement;\n\nexport type SRMFunction<Props extends PropsApp> = (\n  props: Props\n) => any;\n\nexport function overrideModel<\n  StoreModel extends Object = {},\n  Key extends keyof StoreModel = any\n>(\n  store: Store<StoreModel, any>,\n  key: Key,\n  value: StoreModel[Key] | undefined | null\n) {\n  if (value != null) {\n    store.removeModel(key as any);\n    store.addModel(key as any, value as any);\n  }\n}\n\nfunction exportSRM<Props extends PropsApp>(\n  path: string,\n  srm: SRMFunction<Props>\n) {\n  const out = path.split('.').reduce((obj, part) => {\n    if (!obj[part]) {\n      obj[part] = {};\n    }\n\n    return obj[part];\n  }, window as any);\n\n  Object.assign(out || {}, { render: srm });\n}\n\n/*\n * TODO: add callback array/EventListener like SRM.onContentRendered\n * to customize the rendering of the Content (e.g. add IntlProvider\n * and modify returned values).\n*/\n\nexport function SRM<Props extends PropsApp>(\n  path: string,\n  render: RenderFunction<Props & { store: Store<ContextStoreModel, any> }>,\n  loadMessages?: LoadMessagesFunction,\n): SRMFunction<Props & PropsSRM & { store: Store<ContextStoreModel, any> }> {\n  const srm: SRMFunction<Props & PropsSRM & { store: Store<ContextStoreModel, any> }> = (props) => {\n    const {\n      element,\n      selector,\n      basename,\n      language,\n      sendEvent,\n      navigate,\n    } = props;\n\n    let ret = {};\n    const Content = memo(() => {\n      const store = SRMStore.useStore();\n\n      if (props.loadMessages || loadMessages) {\n        overrideModel(store, 'loadMessages', props.loadMessages || loadMessages);\n      }\n\n      const { setBasename } = store.getActions();\n      if (basename) {\n        setBasename(basename);\n      }\n\n      const { setLanguage } = store.getActions();\n      if (language) {\n        setLanguage(language);\n      } else {\n        setLanguage('en');\n      }\n\n      if (sendEvent) {\n        overrideModel(store, 'sendEvent', sendEvent);\n      }\n\n      if (navigate) {\n        overrideModel(store, 'navigate', navigate);\n      }\n\n      ret = {\n        setBasename,\n        setLanguage,\n      };\n\n      const { messages, language: locale } = store.getState();\n      return (\n        <IntlProvider locale={locale} messages={messages} defaultLocale=\"en\">\n          { render(Object.assign({}, props, store)) }\n        </IntlProvider>\n      );\n    });\n\n    const el = element || document.querySelector(selector || \"#srm\");\n    ReactDOM.render(\n      <div className={`__${packg.name}`}>\n        <React.StrictMode>\n          <SRMStore.Provider>\n            <Content />\n          </SRMStore.Provider>\n        </React.StrictMode>\n      </div>,\n      el\n    );\n\n    return ret;\n  };\n\n  exportSRM(path, srm);\n\n  return srm;\n}\n\nfunction getPublicPath() {\n  let path = process.env.PUBLIC_URL;\n  if (!path) {\n    return '';\n  }\n\n  if (!path.endsWith('/')) {\n    path += '/';\n  }\n  return path;\n}\n\n__webpack_public_path__ = getPublicPath();\n","import { action, Action, createContextStore } from \"easy-peasy\";\n\nexport type Messages = { [term: string]: string };\n\nexport type LoadMessagesFunction = (lang: string) => Messages;\n\nexport interface ContextStoreModel {\n  sendEvent: (id: string, ...args: Array<any>) => Promise<any>;\n  navigate: (\n    commands: string | Array<string>,\n    options?: { queryParams?: any }\n  ) => any;\n  basename: string;\n  setBasename: Action<ContextStoreModel, string | undefined>;\n  language: string;\n  setLanguage: Action<ContextStoreModel, string | undefined>;\n  loadMessages: LoadMessagesFunction;\n  messages: Messages;\n}\n\nconst ContextStore = createContextStore<ContextStoreModel>(\n  (initialData) =>\n    initialData || {\n      sendEvent: async () => {},\n      navigate: () => {},\n      basename: \"/\",\n      setBasename: action<ContextStoreModel>((state, value) => {\n        state.basename = value || \"/\";\n      }),\n      language: \"en\",\n      setLanguage: action<ContextStoreModel>((state, value) => {\n        state.language = value || \"en\";\n        state.messages = state.loadMessages?.(state.language);\n      }),\n      loadMessages: () => ({}),\n      messages: {},\n    }\n);\n\nexport default ContextStore;\n","module.exports = __webpack_public_path__ + \"static/media/logo.ce970568.png\";","var map = {\n\t\"./en.json\": 69,\n\t\"./fr.json\": 70\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 68;","import { createContextStore } from \"easy-peasy\";\n\nexport interface ContextStoreModel {\n  getUsername: () => string;\n}\n\nconst ContextStore = createContextStore<ContextStoreModel>(\n  (initialData) =>\n    initialData || {\n      getUsername: () => {\n        let user: any;\n        try {\n          user = JSON.parse(localStorage.getItem(\"user\") || '{}');\n        } catch {}\n\n        return user?.name || 'Stranger';\n      },\n    }\n);\n\nexport default ContextStore;\n","import React from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport ContextStore from './store'\nimport logo from './logo.png';\nimport './App.css'\n\nconst App = () => {\n  const { getUsername } = ContextStore.useStoreState(s => s);\n\n  return (\n    <span className=\"app\">\n      <img alt=\"logo\" src={logo} />\n      <h1 className=\"title\">\n        <FormattedMessage id=\"app.title\" description=\"Title text\" defaultMessage=\"SRM Example\" />\n        <span role=\"img\" aria-label=\"trophee\">🏆</span>\n      </h1>\n      <h2 className=\"greeting\">\n        <FormattedMessage id=\"app.greeting\" description=\"Greeting text\" defaultMessage=\"Hi {name}!\" values={{ name: getUsername() }} />\n      </h2>\n    </span>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react';\nimport { SRM, overrideModel } from \"@robingoupil/srm\";\nimport ContextStore from './store';\nimport App from './App'\n\nimport '@formatjs/intl-locale/polyfill';\nimport '@formatjs/intl-relativetimeformat/polyfill';\nimport '@formatjs/intl-relativetimeformat/locale-data/en';\n\nconst orgName = 'testing';\nconst appName = 'test';\n\nexport interface Props {\n  getUsername(): string,\n}\n\nconst render = SRM(\n  `${orgName}.${appName}`,\n  ({ getUsername }: Props) => {\n    const Content = () => {\n      const store = ContextStore.useStore();\n\n      overrideModel(store, \"getUsername\", getUsername);\n\n      return (\n        <>\n          <App />\n        </>\n      );\n    };\n\n    return (\n      <ContextStore.Provider>\n        <Content />\n      </ContextStore.Provider>\n    );\n  },\n  (lang: string) => require(`./_translations/${lang}.json`)\n);\n\ndeclare global {\n  export interface Window {\n    [orgName]: { [appName]: { render: typeof render } };\n  }\n}\n\nexport default render;\n"],"sourceRoot":""}