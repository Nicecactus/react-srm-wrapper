{"version":3,"sources":["../../index.tsx","../../store.ts","store.ts","App.tsx","index.tsx"],"names":["SRMStore","createContextStore","initialData","sendEvent","navigate","basename","setBasename","action","state","value","language","setLanguage","loadMessages","messages","packg","require","e","console","overrideModel","store","key","path","render","srm","props","element","selector","ret","Content","memo","locale","IntlProvider","defaultLocale","Object","el","document","ReactDOM","className","name","React","out","obj","exportSRM","ContextStore","getAccessToken","a","localStorage","getItem","App","role","aria-label","SRM","useStore","Provider"],"mappings":"8OAaA,E,o1DAFaA,ECSQC,sBACnB,mBACEC,GAAe,CACbC,UAAW,W,0BACXC,SAAU,aACVC,SAHa,IAIbC,YAAaC,UAA0B,cACrCC,WAAiBC,GAAjBD,OAEFE,SAPa,KAQbC,YAAaJ,UAA0B,c,MACrCC,WAAiBC,GAAjBD,KACAA,qBAAiBA,EAAjBA,iCAAiBA,SAAqBA,EAAtCA,aAEFI,aAAc,qBACdC,SAAU,ODrBhB,IACEC,EAAQC,EAARD,IACA,MAAOE,GACPC,mBACAH,IAoCF,SAAgBI,EAIdC,EACAC,EACAX,GAEA,MAAIA,IACFU,iBACAA,iB,MAmBJ,SACEE,EACAC,EACAV,GAEA,IAAMW,EAAgF,SAACC,GACrF,IACEC,EAMED,EAPJ,QAEEE,EAKEF,EAPJ,SAGEnB,EAIEmB,EAPJ,SAIEd,EAGEc,EAPJ,SAKErB,EAEEqB,EAPJ,UAMEpB,EACEoB,EAPJ,SASIG,EAAJ,GACMC,EAAUC,QAAK,WACnB,IAAMV,EAAQnB,EAAd,YAEIwB,gBAAJ,IACEN,EAAcC,EAAO,eAAgBK,gBAArCN,GAGF,IAAQZ,EAAgBa,EAAxB,yBACA,GACEb,KAGF,IAAQK,EAAgBQ,EAAxB,yBAEER,EADF,GAGEA,MAGF,GACEO,EAAcC,EAAO,YAArBD,GAGF,GACEA,EAAcC,EAAO,WAArBD,GAGFS,EAAM,CACJrB,YADI,EAEJK,eAGF,MAAuCQ,EAAvC,WAAQN,EAAR,WAA4BiB,EAA5B,WACA,OACE,gBAACC,EAAD,cAAcD,OAAQA,EAAQjB,SAAUA,EAAUmB,cAAc,MAC5DV,EAAOW,mBAFb,QAOIC,EAAKT,GAAWU,uBAAuBT,GAA7C,QAYA,OAXAU,SACE,uBAAKC,UAAS,KAAOvB,EAAMwB,MACzBC,gBAACA,EAADA,gBACEA,gBAACvC,EAADuC,cACEA,kBAJRH,YAWAT,GAKF,OAxFF,cAIE,IAAMa,EAAMnB,EAAA,mBAAuB,cAKjC,OAJKoB,EAAL,KACEA,SAGKA,EAAP,KALF,QAQAR,cAAcO,GAAdP,GAAyB,CAAEX,OAAQC,IA0EnCmB,CAAUrB,EAAVqB,GAEA,G,+2DEzIaC,EAbM1C,aACnB,SAACC,GAAD,OACEA,GAAe,CACb0C,eAAe,WAAD,4BAAE,sBAAAC,EAAA,wFAELC,aAAaC,QAAQ,gBAFhB,yDAIL,MAJK,wDAAF,kDAAC,OCCNC,EARH,WACV,OACE,8DAC+B,0BAAMC,KAAK,MAAMC,aAAW,UAA5B,kBCY7B5B,EAAS6B,cACb,gBACA,YAAgC,IAA7BP,EAA4B,EAA5BA,eACKhB,EAAU,WACd,IAAMT,EAAQwB,EAAaS,WAI3B,OAFAlC,wBAAcC,EAAO,iBAAkByB,GAGrC,oCACE,kBAAC,EAAD,QAKN,OACE,kBAAC,EAAaS,SAAd,KACE,kBAACzB,EAAD,UAMON,c","file":"static/js/main.fa948de5.chunk.js","sourcesContent":["import defaultPackg from './package.json';\nimport React, { memo, ReactElement } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Store } from 'easy-peasy';\nimport { IntlProvider } from 'react-intl';\nimport _SRMStore, { ContextStoreModel, LoadMessagesFunction } from './store';\n\nimport '@formatjs/intl-locale/polyfill';\nimport '@formatjs/intl-relativetimeformat/polyfill';\nimport '@formatjs/intl-relativetimeformat/locale-data/en';\n\nexport const SRMStore = _SRMStore;\n\nlet packg: { name: string };\ntry {\n  packg = require('webapp__package.json');\n} catch (e) {\n  console.log('e', e)\n  packg = defaultPackg;\n}\ninterface PropsMountSelector {\n  selector: string;\n  element?: null;\n}\n\ninterface PropsMountElement {\n  selector?: null;\n  element: HTMLElement;\n}\n\ntype PropsMount = PropsMountSelector | PropsMountElement;\n\ninterface PropsCommon {\n  sendEvent?: (id: string, ...args: Array<any>) => Promise<any>;\n  navigate: (\n    commands: string | Array<string>,\n    options?: { queryParams?: any }\n  ) => any;\n  loadMessages?: LoadMessagesFunction;\n  basename?: string;\n  language?: string;\n}\n\nexport type PropsSRM<T = void> = PropsMount & PropsCommon & T;\nexport type PropsApp = { [key: string]: any };\n\nexport type RenderFunction<Props extends PropsApp> = (\n  props: Props\n) => ReactElement;\n\nexport type SRMFunction<Props extends PropsApp> = (\n  props: Props\n) => any;\n\nexport function overrideModel<\n  StoreModel extends Object = {},\n  Key extends keyof StoreModel = any\n>(\n  store: Store<StoreModel, any>,\n  key: Key,\n  value: StoreModel[Key] | undefined | null\n) {\n  if (value != null) {\n    store.removeModel(key as any);\n    store.addModel(key as any, value as any);\n  }\n}\n\nfunction exportSRM<Props extends PropsApp>(\n  path: string,\n  srm: SRMFunction<Props>\n) {\n  const out = path.split('.').reduce((obj, part) => {\n    if (!obj[part]) {\n      obj[part] = {};\n    }\n\n    return obj[part];\n  }, window as any);\n\n  Object.assign(out || {}, { render: srm });\n}\n\nexport function SRM<Props extends PropsApp>(\n  path: string,\n  render: RenderFunction<Props & { store: Store<ContextStoreModel, any> }>,\n  loadMessages?: LoadMessagesFunction,\n): SRMFunction<Props & PropsSRM & { store: Store<ContextStoreModel, any> }> {\n  const srm: SRMFunction<Props & PropsSRM & { store: Store<ContextStoreModel, any> }> = (props) => {\n    const {\n      element,\n      selector,\n      basename,\n      language,\n      sendEvent,\n      navigate,\n    } = props;\n\n    let ret = {};\n    const Content = memo(() => {\n      const store = SRMStore.useStore();\n\n      if (props.loadMessages || loadMessages) {\n        overrideModel(store, 'loadMessages', props.loadMessages || loadMessages);\n      }\n\n      const { setBasename } = store.getActions();\n      if (basename) {\n        setBasename(basename);\n      }\n\n      const { setLanguage } = store.getActions();\n      if (language) {\n        setLanguage(language);\n      } else {\n        setLanguage('en');\n      }\n\n      if (sendEvent) {\n        overrideModel(store, 'sendEvent', sendEvent);\n      }\n\n      if (navigate) {\n        overrideModel(store, 'navigate', navigate);\n      }\n\n      ret = {\n        setBasename,\n        setLanguage,\n      };\n\n      const { messages, language: locale } = store.getState();\n      return (\n        <IntlProvider locale={locale} messages={messages} defaultLocale=\"en\">\n          { render(Object.assign({}, props, store)) }\n        </IntlProvider>\n      );\n    });\n\n    const el = element || document.querySelector(selector || \"#srm\");\n    ReactDOM.render(\n      <div className={`__${packg.name}`}>\n        <React.StrictMode>\n          <SRMStore.Provider>\n            <Content />\n          </SRMStore.Provider>\n        </React.StrictMode>\n      </div>,\n      el\n    );\n\n    return ret;\n  };\n\n  exportSRM(path, srm);\n\n  return srm;\n}\n","import { action, Action, createContextStore } from \"easy-peasy\";\n\nexport type Messages = { [term: string]: string };\n\nexport type LoadMessagesFunction = (lang: string) => Messages;\n\nexport interface ContextStoreModel {\n  sendEvent: (id: string, ...args: Array<any>) => Promise<any>;\n  navigate: (\n    commands: string | Array<string>,\n    options?: { queryParams?: any }\n  ) => any;\n  basename: string;\n  setBasename: Action<ContextStoreModel, string | undefined>;\n  language: string;\n  setLanguage: Action<ContextStoreModel, string | undefined>;\n  loadMessages: LoadMessagesFunction;\n  messages: Messages;\n}\n\nconst ContextStore = createContextStore<ContextStoreModel>(\n  (initialData) =>\n    initialData || {\n      sendEvent: async () => {},\n      navigate: () => {},\n      basename: \"/\",\n      setBasename: action<ContextStoreModel>((state, value) => {\n        state.basename = value || \"/\";\n      }),\n      language: \"en\",\n      setLanguage: action<ContextStoreModel>((state, value) => {\n        state.language = value || \"en\";\n        state.messages = state.loadMessages?.(state.language);\n      }),\n      loadMessages: () => ({}),\n      messages: {},\n    }\n);\n\nexport default ContextStore;\n","import { createContextStore } from \"easy-peasy\";\n\nexport interface ContextStoreModel {\n  getAccessToken: () => Promise<string | null>;\n}\n\nconst ContextStore = createContextStore<ContextStoreModel>(\n  (initialData) =>\n    initialData || {\n      getAccessToken: async () => {\n        try {\n          return localStorage.getItem(\"accessToken\");\n        } catch (e) {\n          return null;\n        }\n      },\n    }\n);\n\nexport default ContextStore;\n","import React from 'react'\n\nconst App = () => {\n  return (\n    <span>\n      Create React Library Example <span role=\"img\" aria-label=\"smiley\">ðŸ˜„</span>\n    </span>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react';\nimport { SRM, overrideModel } from \"@robingoupil/srm\";\nimport ContextStore from './store';\nimport App from './App'\n\ndeclare global {\n  export interface Window {\n    nicecactus: { wallet: { render: typeof render } };\n  }\n}\n\nexport interface Props {\n  getAccessToken(): Promise<string>,\n}\n\nconst render = SRM(\n  \"testing.test\",\n  ({ getAccessToken }: Props) => {\n    const Content = () => {\n      const store = ContextStore.useStore();\n\n      overrideModel(store, \"getAccessToken\", getAccessToken);\n\n      return (\n        <>\n          <App />\n        </>\n      );\n    };\n\n    return (\n      <ContextStore.Provider>\n        <Content />\n      </ContextStore.Provider>\n    );\n  }\n);\n\nexport default render;\n"],"sourceRoot":""}